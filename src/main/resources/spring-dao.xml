<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 自动扫描 -->
	<context:component-scan base-package="com.ssm"/>

	<!-- 解析db.properties 因为 db.properties里面有username=root 如果在下面的数据源中使用${username}它取到的是当前系统的登陆名
		如果要使用db.properties里面的username必须加system-properties-mode="FALLBACK"这个属性 -->
	<!--<context:property-placeholder location="classpath:db.properties" system-properties-mode="FALLBACK" />-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:db.properties"/>
	</bean>

	<!-- 第二种方式：加载多个properties文件
    <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations">
            <list>
                <value>classpath:jdbc.properties</value>
                <value>classpath:common.properties</value>
            </list>
        </property>
        <property name="fileEncoding" value="UTF-8"/>
    </bean>
    <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PreferencesPlaceholderConfigurer">
        <property name="properties" ref="configProperties"/>
    </bean>
    -->

	<!-- 配置数据源 -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- 配置sqlSessinoFactory -->
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<!--mybatis的配置文件 -->
		<property name="configLocation" value="classpath:mybatis.cfg.xml"/>
		<!--扫描 XXXmapper.xml映射文件,配置扫描的路径 这个不配置也可以，但是不配置的话，下面dao和xxxMapper.xml必须放在同一个包下面 -->
		<property name="mapperLocations" value="classpath:com/ssm/mapper/*Mapper.xml"/>
	</bean>

	<!--配置DAO所在spring会自动查找下面的类-->
	<!-- Mapper接口所在包名，Spring会自动查找之中的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 以下的配置只能指向一个包 如果配置多个呢 就在包的中间加, -->
		<!-- <property name="basePackage" value="com.ssm.dao,com.ssm.mapper"
			/> -->
		<property name="basePackage" value="com.ssm.mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>

	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 注解方式配置事物 -->
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<tx:annotation-driven transaction-manager="txManager"/>

	<!-- 拦截器方式配置事物
    spring有很多事物管理，其中很多都是被淘汰的了，企业一直在用，最好配置方法如下，配置事务之后，用切面直接切入所有servic层
    -->
	<!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
	<!--<tx:attributes>-->
	<!--<tx:method name="add*" propagation="REQUIRED" />-->
	<!--<tx:method name="append*" propagation="REQUIRED" />-->
	<!--<tx:method name="insert*" propagation="REQUIRED" />-->
	<!--<tx:method name="save*" propagation="REQUIRED" />-->
	<!--<tx:method name="update*" propagation="REQUIRED" />-->
	<!--<tx:method name="modify*" propagation="REQUIRED" />-->
	<!--<tx:method name="edit*" propagation="REQUIRED" />-->
	<!--<tx:method name="delete*" propagation="REQUIRED" />-->
	<!--<tx:method name="remove*" propagation="REQUIRED" />-->
	<!--<tx:method name="repair" propagation="REQUIRED" />-->
	<!--<tx:method name="delAndRepair" propagation="REQUIRED" />-->

	<!--<tx:method name="get*" propagation="SUPPORTS" />-->
	<!--<tx:method name="find*" propagation="SUPPORTS" />-->
	<!--<tx:method name="load*" propagation="SUPPORTS" />-->
	<!--<tx:method name="search*" propagation="SUPPORTS" />-->
	<!--<tx:method name="datagrid*" propagation="SUPPORTS" />-->

	<!--<tx:method name="*" propagation="SUPPORTS" />-->
	<!--</tx:attributes>-->
	<!--</tx:advice>-->
	<!--<aop:config>-->
	<!--<aop:pointcut id="transactionPointcut" expression="execution(* com.jsx.service..*Impl.*(..))" />-->
	<!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />-->
	<!--</aop:config>-->
</beans>